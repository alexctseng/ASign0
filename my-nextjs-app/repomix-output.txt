This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-06T04:11:11.973Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  file.svg
  globe.svg
  next.svg
  vercel.svg
  window.svg
src/
  app/
    pdf-viewer/
      page.tsx
    globals.css
    layout.tsx
    page.tsx
  components/
    pdf/
      resizable-signature.tsx
      signature-pad.tsx
      toolbar.tsx
    ui/
      button.tsx
      dropdown-menu.tsx
      input.tsx
    landing-page.tsx
  lib/
    supabase/
      client.ts
      server.ts
      types.ts
    utils.ts
  types/
    database.types.ts
  utils/
    error-handling.ts
    pdf-coordinates.ts
    supabase.ts
  middleware.ts
.eslintrc.json
.gitignore
components.json
next.config.ts
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: src/app/pdf-viewer/page.tsx
================
'use client'

import { useSearchParams } from 'next/navigation'
import { useState, useEffect, useRef } from 'react'
import { Button } from "@/components/ui/button"
import { ArrowLeft, Copy, Trash2 } from 'lucide-react'
import Link from 'next/link'
import { PDFToolbar } from '@/components/pdf/toolbar'
import { SignaturePad } from '@/components/pdf/signature-pad'
import { ResizableSignature } from '@/components/pdf/resizable-signature'
import { Worker, Viewer } from '@react-pdf-viewer/core';
import { defaultLayoutPlugin } from '@react-pdf-viewer/default-layout';
import { pageNavigationPlugin } from '@react-pdf-viewer/page-navigation';
import { scrollModePlugin } from '@react-pdf-viewer/scroll-mode';
import { zoomPlugin } from '@react-pdf-viewer/zoom';
import { viewportToPageCoordinates, pageToViewportCoordinates } from '@/utils/pdf-coordinates'

// Define types for our annotations
interface Annotation {
  id: string
  type: 'signature' | 'text' | 'drawing'
  pageNumber: number
  pageX: number // percentage within the page
  pageY: number // percentage within the page
  width: number
  height: number
  content: string
}

interface PDFDimensions {
  width: number
  height: number
  totalPages: number
}

// Update the interface for the document load event
interface DocumentLoadEvent {
  doc: any; // Using any for now since the PDF.js types are complex
  file: any;
}

export default function PDFViewer() {
  const searchParams = useSearchParams()
  const [pdfUrl, setPdfUrl] = useState<string>('')
  const [currentTool, setCurrentTool] = useState<string>('')
  const [showSignaturePad, setShowSignaturePad] = useState(false)
  const [annotations, setAnnotations] = useState<Annotation[]>([])
  const [scale, setScale] = useState(1)
  const [selectedAnnotation, setSelectedAnnotation] = useState<string | null>(null)
  const iframeRef = useRef<HTMLIFrameElement>(null)
  const containerRef = useRef<HTMLDivElement>(null)
  const [currentPage, setCurrentPage] = useState(1)
  const [pdfDimensions, setPdfDimensions] = useState<PDFDimensions>({
    width: 0,
    height: 0,
    totalPages: 1
  })
  const defaultLayoutPluginInstance = defaultLayoutPlugin({
    sidebarTabs: () => [],
  });
  const pageNavigationPluginInstance = pageNavigationPlugin();
  const scrollModePluginInstance = scrollModePlugin();
  const zoomPluginInstance = zoomPlugin();
  const { ZoomIn, ZoomOut } = zoomPluginInstance;
  const viewerRef = useRef<Viewer>(null);

  // Add this to track PDF loading
  const [isLoaded, setIsLoaded] = useState(false)

  // First, add this state to track PDF pages
  const [pdfPages, setPdfPages] = useState<HTMLElement[]>([]);

  useEffect(() => {
    const url = searchParams.get('url')
    if (url) setPdfUrl(decodeURIComponent(url))
  }, [searchParams])

  useEffect(() => {
    return () => {
      if (pdfUrl.startsWith('blob:')) {
        URL.revokeObjectURL(pdfUrl)
      }
    }
  }, [pdfUrl])

  useEffect(() => {
    const iframe = iframeRef.current
    if (!iframe) return

    const handleScroll = () => {
      const contentWindow = iframe.contentWindow
      if (!contentWindow) return

      const scrollTop = contentWindow.document.documentElement.scrollTop
      const pageHeight = pdfDimensions.height
      const currentPage = Math.floor(scrollTop / pageHeight) + 1
      setCurrentPage(currentPage)
    }

    iframe.addEventListener('load', () => {
      const contentWindow = iframe.contentWindow
      if (!contentWindow) return

      setPdfDimensions(prev => ({
        ...prev,
        width: contentWindow.document.documentElement.scrollWidth,
        height: contentWindow.document.documentElement.scrollHeight
      }))

      contentWindow.addEventListener('scroll', handleScroll)
    })

    return () => {
      const contentWindow = iframe.contentWindow
      if (contentWindow) {
        contentWindow.removeEventListener('scroll', handleScroll)
      }
    }
  }, [])

  useEffect(() => {
    const viewer = document.querySelector('.rpv-core__viewer') as HTMLElement
    if (!viewer) return

    const observer = new ResizeObserver((entries) => {
      for (const entry of entries) {
        const { width, height } = entry.contentRect
        setPdfDimensions(prev => ({
          ...prev,
          width,
          height,
          totalPages: prev.totalPages
        }))
      }
    })

    observer.observe(viewer)
    return () => observer.disconnect()
  }, [])

  useEffect(() => {
    const pages = Array.from(document.querySelectorAll('.rpv-core__page-layer'));
    setPdfPages(pages as HTMLElement[]);
  }, [currentPage]); // Update when page changes

  const handleToolSelect = (tool: string) => {
    setCurrentTool(tool)
    if (tool === 'signature') {
      setShowSignaturePad(true)
    }
  }

  const handleSignatureSave = (signatureData: string) => {
    const newAnnotation: Annotation = {
      id: crypto.randomUUID(),
      type: 'signature',
      pageNumber: currentPage,
      pageX: 20,
      pageY: 20,
      width: 200,
      height: 100,
      content: signatureData
    };

    setAnnotations(prev => [...prev, newAnnotation]);
    setSelectedAnnotation(newAnnotation.id);
    setShowSignaturePad(false);
  };

  const handleAnnotationMove = (annotationId: string, deltaX: number, deltaY: number) => {
    if (!containerRef.current) return;

    const container = containerRef.current;
    const rect = container.getBoundingClientRect();

    setAnnotations(prev => prev.map(ann => {
      if (ann.id !== annotationId) return ann;

      // Convert delta pixels to percentage
      const deltaXPercent = (deltaX / rect.width) * 100;
      const deltaYPercent = (deltaY / rect.height) * 100;

      return {
        ...ann,
        pageX: Math.max(0, Math.min(100, ann.pageX + deltaXPercent)),
        pageY: Math.max(0, Math.min(100, ann.pageY + deltaYPercent))
      };
    }));
  };

  const handleZoomIn = () => {
    if (scale < 3) {  // Max zoom of 300%
      setScale(prev => Math.min(prev + 0.2, 3));
    }
  };

  const handleZoomOut = () => {
    if (scale > 0.5) {  // Min zoom of 50%
      setScale(prev => Math.max(prev - 0.2, 0.5));
    }
  };

  const handleDeleteAnnotation = (id: string) => {
    setAnnotations(prev => prev.filter(annotation => annotation.id !== id))
    setSelectedAnnotation(null)
  }

  const handleDuplicateAnnotation = (id: string) => {
    const annotationToDuplicate = annotations.find(a => a.id === id);
    if (!annotationToDuplicate) return;

    const newAnnotation: Annotation = {
      ...annotationToDuplicate,
      id: crypto.randomUUID(),
      pageX: annotationToDuplicate.pageX + 20,
      pageY: annotationToDuplicate.pageY + 20,
      width: annotationToDuplicate.width,
      height: annotationToDuplicate.height
    };

    setAnnotations(prev => [...prev, newAnnotation]);
    setSelectedAnnotation(newAnnotation.id);
  };

  const handleDocumentLoad = (e: DocumentLoadEvent) => {
    if (!e.doc) return;
    
    // Set dimensions based on the viewer's container
    if (containerRef.current) {
      const container = containerRef.current;
      setPdfDimensions({
        width: container.clientWidth,
        height: container.clientHeight,
        totalPages: e.doc.numPages
      });
    }
    setIsLoaded(true);
  };

  const handlePageChange = (e: { currentPage: number }) => {
    setCurrentPage(e.currentPage);
  };

  return (
    <div className="flex flex-col h-screen">
      <PDFToolbar 
        onToolSelect={handleToolSelect}
        onZoomIn={() => setScale(prev => Math.min(prev + 0.1, 2))}
        onZoomOut={() => setScale(prev => Math.max(prev - 0.1, 0.5))}
        currentTool={currentTool}
      />
      
      <div className="flex-1 bg-gray-800 relative" ref={containerRef}>
        <Worker workerUrl="https://unpkg.com/pdfjs-dist@3.11.174/build/pdf.worker.min.js">
          <div className="h-full pdf-viewer">
            <Viewer
              fileUrl={pdfUrl}
              defaultScale={scale}
              plugins={[defaultLayoutPluginInstance]}
              onDocumentLoad={handleDocumentLoad}
              onPageChange={(e) => setCurrentPage(e.currentPage)}
            />
          </div>
        </Worker>

        <div className="absolute inset-0 pointer-events-none">
          {annotations.map((annotation) => (
            <div
              key={annotation.id}
              className="absolute pointer-events-auto"
              style={{
                left: `${annotation.pageX}%`,
                top: `${annotation.pageY}%`,
                transform: `scale(${scale})`,
                transformOrigin: 'top left'
              }}
            >
              <ResizableSignature
                content={annotation.content}
                initialWidth={annotation.width}
                initialHeight={annotation.height}
                isSelected={selectedAnnotation === annotation.id}
                onClick={() => setSelectedAnnotation(annotation.id)}
                onDelete={() => handleDeleteAnnotation(annotation.id)}
                onDuplicate={() => handleDuplicateAnnotation(annotation.id)}
                onMove={(deltaX, deltaY) => {
                  const container = containerRef.current;
                  if (!container) return;
                  
                  const rect = container.getBoundingClientRect();
                  const deltaXPercent = (deltaX / rect.width) * 100;
                  const deltaYPercent = (deltaY / rect.height) * 100;
                  
                  setAnnotations(prev => prev.map(a => {
                    if (a.id !== annotation.id) return a;
                    return {
                      ...a,
                      pageX: Math.max(0, Math.min(100, a.pageX + deltaXPercent)),
                      pageY: Math.max(0, Math.min(100, a.pageY + deltaYPercent))
                    };
                  }));
                }}
              />
            </div>
          ))}
        </div>
      </div>

      {showSignaturePad && (
        <SignaturePad
          onSave={handleSignatureSave}
          onClose={() => setShowSignaturePad(false)}
        />
      )}
    </div>
  );
}

================
File: src/app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 20 14.3% 4.1%;
    --card: 0 0% 100%;
    --card-foreground: 20 14.3% 4.1%;
    --popover: 0 0% 100%;
    --popover-foreground: 20 14.3% 4.1%;
    --primary: 24 9.8% 10%;
    --primary-foreground: 60 9.1% 97.8%;
    --secondary: 60 4.8% 95.9%;
    --secondary-foreground: 24 9.8% 10%;
    --muted: 60 4.8% 95.9%;
    --muted-foreground: 25 5.3% 44.7%;
    --accent: 60 4.8% 95.9%;
    --accent-foreground: 24 9.8% 10%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 60 9.1% 97.8%;
    --border: 20 5.9% 90%;
    --input: 20 5.9% 90%;
    --ring: 20 14.3% 4.1%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 20 14.3% 4.1%;
    --foreground: 60 9.1% 97.8%;
    --card: 20 14.3% 4.1%;
    --card-foreground: 60 9.1% 97.8%;
    --popover: 20 14.3% 4.1%;
    --popover-foreground: 60 9.1% 97.8%;
    --primary: 60 9.1% 97.8%;
    --primary-foreground: 24 9.8% 10%;
    --secondary: 12 6.5% 15.1%;
    --secondary-foreground: 60 9.1% 97.8%;
    --muted: 12 6.5% 15.1%;
    --muted-foreground: 24 5.4% 63.9%;
    --accent: 12 6.5% 15.1%;
    --accent-foreground: 60 9.1% 97.8%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 60 9.1% 97.8%;
    --border: 12 6.5% 15.1%;
    --input: 12 6.5% 15.1%;
    --ring: 24 5.7% 82.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

@import '~@react-pdf-viewer/core/lib/styles/index.css';
@import '~@react-pdf-viewer/default-layout/lib/styles/index.css';

.pdf-viewer {
  position: relative;
  height: 100%;
  width: 100%;
  overflow: auto;
}

.rpv-core__viewer {
  position: relative !important;
}

.rpv-core__page-layer {
  position: relative !important;
}

.rpv-core__inner-pages {
  padding: 1rem !important;
}

.rpv-core__page-layer canvas {
  width: 100%;
  height: 100%;
}

.rpv-core__page-container {
  padding: 0 !important;
  position: relative !important;
}

.rpv-core__toolbar {
  display: none !important;
}

.rpv-core__page {
  margin: 8px 0;
}

.rpv-core__doc-loading {
  @apply hidden;
}

================
File: src/app/layout.tsx
================
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'My Next.js App',
  description: 'Created with Next.js',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <main className="min-h-screen">
          {children}
        </main>
      </body>
    </html>
  )
}

================
File: src/app/page.tsx
================
'use client'

import { LandingPage } from "@/components/landing-page"

export default function Home() {
  return <LandingPage />
}

================
File: src/components/pdf/resizable-signature.tsx
================
'use client'

import { useState, useRef, useEffect, useCallback } from 'react'
import { X, MoreVertical, Trash2, Copy, Square } from 'lucide-react'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

interface ResizableSignatureProps {
  content: string
  initialWidth?: number
  initialHeight?: number
  onResize?: (width: number, height: number) => void
  onMove?: (deltaX: number, deltaY: number) => void
  isSelected?: boolean
  onClick?: (e: React.MouseEvent) => void
  onDelete?: () => void
  onDuplicate?: () => void
  style?: React.CSSProperties
}

export function ResizableSignature({
  content,
  initialWidth = 200,
  initialHeight = 100,
  onResize,
  onMove,
  isSelected = false,
  onClick,
  onDelete,
  onDuplicate,
  style
}: ResizableSignatureProps) {
  const containerRef = useRef<HTMLDivElement>(null)
  const [width, setWidth] = useState(initialWidth)
  const [height, setHeight] = useState(initialHeight)
  const [isResizing, setIsResizing] = useState(false)
  const [isDragging, setIsDragging] = useState(false)
  const startPos = useRef({ x: 0, y: 0, width: 0, height: 0 })
  const resizeCorner = useRef<string | null>(null)

  const handleCornerMouseDown = (corner: string) => (e: React.MouseEvent) => {
    e.stopPropagation()
    setIsResizing(true)
    resizeCorner.current = corner
    startPos.current = {
      x: e.clientX,
      y: e.clientY,
      width,
      height
    }
  }

  const handleResizeMove = (e: MouseEvent) => {
    if (!isResizing) return

    const deltaX = e.clientX - startPos.current.x
    const deltaY = e.clientY - startPos.current.y
    
    let newWidth = width
    let newHeight = height

    switch (resizeCorner.current) {
      case 'se':
        newWidth = Math.max(50, startPos.current.width + deltaX)
        newHeight = Math.max(25, startPos.current.height + deltaY)
        break
      case 'sw':
        newWidth = Math.max(50, startPos.current.width - deltaX)
        newHeight = Math.max(25, startPos.current.height + deltaY)
        break
      case 'ne':
        newWidth = Math.max(50, startPos.current.width + deltaX)
        newHeight = Math.max(25, startPos.current.height - deltaY)
        break
      case 'nw':
        newWidth = Math.max(50, startPos.current.width - deltaX)
        newHeight = Math.max(25, startPos.current.height - deltaY)
        break
    }
    
    setWidth(newWidth)
    setHeight(newHeight)
    onResize?.(newWidth, newHeight)
  }

  const handleResizeEnd = () => {
    setIsResizing(false)
    resizeCorner.current = null
  }

  const handleDragStart = (e: React.MouseEvent) => {
    if (isResizing) return
    e.stopPropagation()
    setIsDragging(true)
    startPos.current = {
      x: e.clientX,
      y: e.clientY,
      width,
      height
    }
  }

  const handleDragMove = useCallback((e: MouseEvent) => {
    if (!isDragging || !containerRef.current) return
    
    const rect = containerRef.current.getBoundingClientRect()
    const deltaX = e.clientX - startPos.current.x
    const deltaY = e.clientY - startPos.current.y
    
    onMove?.(deltaX, deltaY)
    
    startPos.current = {
      x: e.clientX,
      y: e.clientY,
      width,
      height
    }
  }, [isDragging, onMove, width, height])

  const handleDragEnd = () => {
    setIsDragging(false)
  }

  useEffect(() => {
    if (isResizing) {
      window.addEventListener('mousemove', handleResizeMove)
      window.addEventListener('mouseup', handleResizeEnd)
    }
    if (isDragging) {
      window.addEventListener('mousemove', handleDragMove)
      window.addEventListener('mouseup', handleDragEnd)
    }
    return () => {
      window.removeEventListener('mousemove', handleResizeMove)
      window.removeEventListener('mouseup', handleResizeEnd)
      window.removeEventListener('mousemove', handleDragMove)
      window.removeEventListener('mouseup', handleDragEnd)
    }
  }, [isResizing, isDragging])

  return (
    <div 
      ref={containerRef}
      style={{
        ...style,
        width: `${width}px`,
        height: `${height}px`,
        cursor: isDragging ? 'grabbing' : 'grab',
      }}
      onClick={onClick}
      onMouseDown={handleDragStart}
    >
      <img 
        src={content} 
        alt="Signature"
        className="w-full h-full object-contain pointer-events-none"
        draggable={false}
      />
      
      {isSelected && (
        <>
          <div className="absolute inset-0 border-2 border-blue-500 pointer-events-none" />
          <div className="absolute top-0 left-1/2 -translate-x-1/2 transform -translate-y-[100%]">
            <div className="bg-white shadow-md rounded-lg py-1.5 px-2 flex items-center gap-2">
              <button
                className="flex items-center px-3 py-1.5 hover:bg-gray-50 rounded-md transition-colors"
                onClick={(e: React.MouseEvent) => {
                  e.stopPropagation();
                  onDuplicate?.();
                }}
              >
                <span className="text-gray-600 text-sm whitespace-nowrap flex items-center gap-2">
                  <Square className="w-4 h-4" />
                  Duplicate
                </span>
              </button>
              <div className="w-px h-5 bg-gray-200" />
              <button
                className="flex items-center px-3 py-1.5 hover:bg-gray-50 rounded-md transition-colors"
                onClick={(e: React.MouseEvent) => {
                  e.stopPropagation();
                  onDelete?.();
                }}
              >
                <span className="text-gray-600 text-sm whitespace-nowrap flex items-center gap-2">
                  <Trash2 className="w-4 h-4" />
                  Delete
                </span>
              </button>
            </div>
          </div>
          {['nw', 'ne', 'se', 'sw'].map((corner) => (
            <div
              key={corner}
              className="absolute w-3 h-3 bg-blue-500 border-2 border-white rounded-sm"
              style={{
                top: corner.includes('n') ? -4 : 'auto',
                bottom: corner.includes('s') ? -4 : 'auto',
                left: corner.includes('w') ? -4 : 'auto',
                right: corner.includes('e') ? -4 : 'auto',
                cursor: `${corner}-resize`,
                zIndex: 60
              }}
              onMouseDown={handleCornerMouseDown(corner)}
            />
          ))}
        </>
      )}
    </div>
  )
}

================
File: src/components/pdf/signature-pad.tsx
================
'use client'

import { useRef, useEffect, useState } from 'react'
import { Button } from "@/components/ui/button"
import { Check, X } from "lucide-react"
import { motion, AnimatePresence } from "framer-motion"

interface Point {
  x: number
  y: number
  pressure: number
}

interface SignaturePadProps {
  onSave: (signature: string) => void
  onClose: () => void
}

export function SignaturePad({ onSave, onClose }: SignaturePadProps) {
  const canvasRef = useRef<HTMLCanvasElement>(null)
  const contextRef = useRef<CanvasRenderingContext2D | null>(null)
  const isDrawing = useRef(false)
  const [isConverting, setIsConverting] = useState(false)
  const pathsRef = useRef<Point[][]>([])
  const currentPath = useRef<Point[]>([])

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return

    // Set canvas size with higher resolution
    const rect = canvas.getBoundingClientRect()
    canvas.width = rect.width * 2
    canvas.height = rect.height * 2

    const context = canvas.getContext('2d')
    if (!context) return

    context.scale(2, 2) // Scale for high DPI
    context.strokeStyle = 'black'
    context.lineWidth = 2
    context.lineCap = 'round'
    context.lineJoin = 'round'
    contextRef.current = context
  }, [])

  const startDrawing = (e: React.MouseEvent) => {
    const canvas = canvasRef.current
    if (!canvas) return

    const rect = canvas.getBoundingClientRect()
    const x = e.clientX - rect.left
    const y = e.clientY - rect.top

    currentPath.current = [{ x, y, pressure: 1 }]
    contextRef.current?.beginPath()
    contextRef.current?.moveTo(x, y)
    isDrawing.current = true
  }

  const draw = (e: React.MouseEvent) => {
    if (!isDrawing.current || !contextRef.current) return

    const canvas = canvasRef.current
    if (!canvas) return

    const rect = canvas.getBoundingClientRect()
    const x = e.clientX - rect.left
    const y = e.clientY - rect.top

    currentPath.current.push({ x, y, pressure: 1 })
    
    // Clear and redraw the current path
    contextRef.current.clearRect(0, 0, canvas.width, canvas.height)
    drawPaths(contextRef.current, [...pathsRef.current, currentPath.current])
  }

  const drawPaths = (ctx: CanvasRenderingContext2D, paths: Point[][]) => {
    ctx.beginPath()
    paths.forEach(path => {
      if (path.length < 2) return

      ctx.moveTo(path[0].x, path[0].y)
      
      // Use quadratic curves for smoother lines
      for (let i = 1; i < path.length - 1; i++) {
        const xc = (path[i].x + path[i + 1].x) / 2
        const yc = (path[i].y + path[i + 1].y) / 2
        ctx.quadraticCurveTo(path[i].x, path[i].y, xc, yc)
      }
      
      // Connect to the last point
      const last = path[path.length - 1]
      ctx.lineTo(last.x, last.y)
    })
    ctx.stroke()
  }

  const stopDrawing = () => {
    if (!isDrawing.current) return
    
    if (currentPath.current.length > 1) {
      pathsRef.current.push([...currentPath.current])
    }
    currentPath.current = []
    isDrawing.current = false
  }

  const handleSave = async () => {
    const canvas = canvasRef.current
    if (!canvas) return

    setIsConverting(true)

    // Add a small delay to show the animation
    await new Promise(resolve => setTimeout(resolve, 100))

    // Generate SVG path data from the drawn paths
    const paths = pathsRef.current.map(path => {
      if (path.length < 2) return ''

      let d = `M ${path[0].x} ${path[0].y}`
      for (let i = 1; i < path.length - 1; i++) {
        const xc = (path[i].x + path[i + 1].x) / 2
        const yc = (path[i].y + path[i + 1].y) / 2
        d += ` Q ${path[i].x} ${path[i].y} ${xc} ${yc}`
      }
      const last = path[path.length - 1]
      d += ` L ${last.x} ${last.y}`
      return d
    }).filter(Boolean)

    // Create SVG string
    const svgString = `
      <svg viewBox="0 0 ${canvas.width/2} ${canvas.height/2}" xmlns="http://www.w3.org/2000/svg">
        ${paths.map(d => `<path d="${d}" fill="none" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>`).join('')}
      </svg>
    `

    // Wait for animation to complete
    await new Promise(resolve => setTimeout(resolve, 800))
    setIsConverting(false)
    
    onSave(`data:image/svg+xml;base64,${btoa(svgString)}`)
  }

  return (
    <div className="fixed inset-0 bg-background/80 backdrop-blur-sm z-50 flex items-center justify-center">
      <div className="bg-background rounded-lg shadow-lg p-6 w-[550px]">
        <h3 className="text-lg font-medium mb-4">Draw Your Signature</h3>
        <div className="border rounded-lg p-2 mb-4 relative">
          <canvas
            ref={canvasRef}
            onMouseDown={startDrawing}
            onMouseMove={draw}
            onMouseUp={stopDrawing}
            onMouseLeave={stopDrawing}
            className="w-full h-[200px] border rounded cursor-crosshair bg-white"
            style={{ touchAction: 'none' }}
          />
          
          <AnimatePresence>
            {isConverting && (
              <motion.div 
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="absolute inset-0 bg-white"
              >
                <svg className="w-full h-full">
                  {pathsRef.current.map((path, index) => (
                    <motion.path
                      key={index}
                      d={generatePathD(path)}
                      fill="none"
                      stroke="black"
                      strokeWidth="2"
                      initial={{ pathLength: 0 }}
                      animate={{ pathLength: 1 }}
                      transition={{ duration: 0.5, delay: index * 0.1 }}
                    />
                  ))}
                </svg>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
        
        <div className="flex justify-end gap-2">
          <Button variant="ghost" onClick={onClose}>
            <X className="h-4 w-4 mr-2" />
            Cancel
          </Button>
          <Button onClick={handleSave}>
            <Check className="h-4 w-4 mr-2" />
            Save Signature
          </Button>
        </div>
      </div>
    </div>
  )
}

function generatePathD(path: Point[]): string {
  if (path.length < 2) return ''
  
  let d = `M ${path[0].x} ${path[0].y}`
  
  for (let i = 1; i < path.length - 1; i++) {
    const xc = (path[i].x + path[i + 1].x) / 2
    const yc = (path[i].y + path[i + 1].y) / 2
    d += ` Q ${path[i].x} ${path[i].y} ${xc} ${yc}`
  }
  
  const last = path[path.length - 1]
  d += ` L ${last.x} ${last.y}`
  
  return d
}

================
File: src/components/pdf/toolbar.tsx
================
'use client'

import React from 'react'
import { Button } from "@/components/ui/button"
import { 
  Pen, 
  Type, 
  Image as ImageIcon, 
  Signature, 
  Download, 
  Share2,
  ZoomIn,
  ZoomOut
} from "lucide-react"

interface ToolbarProps {
  onToolSelect: (tool: string) => void;
  onZoomIn: () => void;
  onZoomOut: () => void;
  currentTool: string;
}

export function PDFToolbar({ 
  onToolSelect, 
  onZoomIn, 
  onZoomOut, 
  currentTool 
}: ToolbarProps) {
  const tools = [
    { id: 'draw', icon: Pen, label: 'Draw' },
    { id: 'text', icon: Type, label: 'Text' },
    { id: 'image', icon: ImageIcon, label: 'Image' },
    { id: 'signature', icon: Signature, label: 'Sign' },
  ]

  return (
    <div className="flex items-center justify-between px-4 py-2 border-b bg-background">
      <div className="flex items-center gap-2">
        {tools.map((tool) => (
          <Button
            key={tool.id}
            variant={currentTool === tool.id ? "default" : "ghost"}
            size="sm"
            onClick={() => onToolSelect(tool.id)}
          >
            <tool.icon className="h-4 w-4 mr-2" />
            {tool.label}
          </Button>
        ))}
      </div>
      
      <div className="flex items-center gap-2">
        <Button variant="ghost" size="sm" onClick={onZoomOut}>
          <ZoomOut className="h-4 w-4" />
        </Button>
        <Button variant="ghost" size="sm" onClick={onZoomIn}>
          <ZoomIn className="h-4 w-4" />
        </Button>
        <Button variant="ghost" size="sm">
          <Download className="h-4 w-4" />
        </Button>
        <Button variant="ghost" size="sm">
          <Share2 className="h-4 w-4" />
        </Button>
      </div>
    </div>
  )
}

================
File: src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: src/components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: src/components/landing-page.tsx
================
'use client'

import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Moon, Sun, Upload, Calendar, Shield, CheckCircle } from 'lucide-react'
import Link from "next/link"
import Image from "next/image"
import { useState, useCallback, useEffect } from "react"
import { useDropzone } from 'react-dropzone'
import { FileWithPath } from 'react-dropzone';
import { useRouter } from 'next/navigation'

export function LandingPage() {
  const [isDarkMode, setIsDarkMode] = useState(true)
  const [file, setFile] = useState<File | null>(null)
  const router = useRouter()

  useEffect(() => {
    // Set dark mode by default
    document.documentElement.classList.add('dark')
  }, [])

  const toggleTheme = () => {
    setIsDarkMode(!isDarkMode)
    document.documentElement.classList.toggle('dark')
  }

  const onDrop = useCallback((acceptedFiles: File[]) => {
    const file = acceptedFiles[0]
    setFile(file)
    
    // Create a URL for the PDF
    const objectUrl = URL.createObjectURL(file)
    
    // Navigate to the PDF viewer with the URL
    router.push(`/pdf-viewer?url=${encodeURIComponent(objectUrl)}`)
  }, [router])

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {'application/pdf': ['.pdf']},
    multiple: false
  })

  return (
    <div className={`min-h-screen font-inter ${isDarkMode ? 'dark' : ''}`}>
      <div className="w-full bg-background text-foreground transition-colors duration-300">
        <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
          <div className="max-w-7xl mx-auto px-6 sm:px-6 lg:px-8">
            <div className="flex h-16 items-center justify-between">
              <div className="flex items-center space-x-3">
                <Image
                  src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/image-eebfn5UnSJoFRHHVsE1r7H3rNdcogd.png"
                  alt="ASign Logo"
                  width={32}
                  height={32}
                  className={`object-contain transition-all duration-300 ${isDarkMode ? '' : 'invert'}`}
                  priority
                />
                <span className="text-xl font-light">ASign</span>
              </div>
              
              <nav className="hidden md:flex items-center absolute left-1/2 transform -translate-x-1/2">
                <div className="flex space-x-8">
                  <Link className="text-sm text-muted-foreground hover:text-primary transition-colors duration-200" href="#">Features</Link>
                  <Link className="text-sm text-muted-foreground hover:text-primary transition-colors duration-200" href="#">Templates</Link>
                  <Link className="text-sm text-muted-foreground hover:text-primary transition-colors duration-200" href="#">Pricing</Link>
                  <Link className="text-sm text-muted-foreground hover:text-primary transition-colors duration-200" href="#">Help</Link>
                </div>
              </nav>
              
              <div className="flex items-center space-x-4">
                <Button
                  variant="ghost"
                  size="icon"
                  className="h-8 w-8 rounded-full"
                  onClick={toggleTheme}
                  aria-label="Toggle theme"
                >
                  {isDarkMode ? <Sun className="h-4 w-4" /> : <Moon className="h-4 w-4" />}
                </Button>
                <Button variant="ghost" className="text-sm font-normal" asChild>
                  <Link href="/login">Sign in</Link>
                </Button>
                <Button className="text-sm font-normal bg-primary hover:bg-primary/90 text-primary-foreground rounded-full px-6" asChild>
                  <Link href="/signup">Get Started</Link>
                </Button>
              </div>
            </div>
          </div>
        </header>
        <main>
          <section className="w-full py-12 md:py-24 lg:py-32 xl:py-48">
            <div className="max-w-7xl mx-auto px-6 sm:px-6 lg:px-8">
              <div className="flex flex-col items-center text-center space-y-8">
                <div className="space-y-4 max-w-3xl">
                  <h1 className="text-4xl font-extralight tracking-tight sm:text-5xl xl:text-6xl/none">
                    Sign Documents Securely,
                    <br />
                    <span className="font-normal">Anywhere, Anytime</span>
                  </h1>
                  <p className="mx-auto max-w-[700px] text-muted-foreground md:text-xl font-light">
                    Transform your document signing experience with our secure, efficient, and user-friendly platform.
                    Upload, sign, and manage all your documents in one place.
                  </p>
                </div>
                
                <div
                  {...getRootProps()}
                  className={`w-full max-w-2xl mx-auto rounded-xl ${
                    isDragActive ? 'border-primary' : 'border-muted-foreground/25'
                  } border-2 border-dashed bg-muted/50 backdrop-blur-sm transition-all hover:border-primary`}
                >
                  <div className="p-12 text-center cursor-pointer">
                    <input {...getInputProps()} className="hidden" />
                    <div className="flex flex-col items-center justify-center space-y-4">
                      {file ? (
                        <>
                          <CheckCircle className="h-12 w-12 text-primary" />
                          <div>
                            <p className="text-lg font-light">{file.name}</p>
                            <p className="text-sm text-muted-foreground">Ready to sign</p>
                          </div>
                          <Button 
                            className="mt-4" 
                            onClick={() => {
                              if (file) {
                                const objectUrl = URL.createObjectURL(file)
                                router.push(`/pdf-viewer?url=${encodeURIComponent(objectUrl)}`)
                              }
                            }}
                          >
                            Start Signing
                          </Button>
                        </>
                      ) : (
                        <>
                          <Upload className="h-12 w-12 text-muted-foreground mb-4" />
                          <div className="space-y-2">
                            <p className="text-lg font-light">Drag & drop your PDF here</p>
                            <p className="text-sm text-muted-foreground">or click to select a file</p>
                          </div>
                        </>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          <section className="w-full py-12 md:py-24 lg:py-32 bg-muted">
            <div className="container px-4 md:px-6">
              <div className="grid gap-8 lg:grid-cols-3">
                <div className="flex flex-col p-8 bg-background rounded-xl shadow-lg">
                  <div className="p-4 rounded-full bg-primary/10 w-fit">
                    <Upload className="h-8 w-8 text-primary" />
                  </div>
                  <h3 className="text-xl font-light mt-4 mb-2">Easy Upload</h3>
                  <p className="text-muted-foreground font-light">Drag & drop your documents for instant signing capabilities.</p>
                </div>
                <div className="flex flex-col p-8 bg-background rounded-xl shadow-lg">
                  <div className="p-4 rounded-full bg-primary/10 w-fit">
                    <Calendar className="h-8 w-8 text-primary" />
                  </div>
                  <h3 className="text-xl font-light mt-4 mb-2">Smart Processing</h3>
                  <p className="text-muted-foreground font-light">Automatic field detection and intelligent form filling.</p>
                </div>
                <div className="flex flex-col p-8 bg-background rounded-xl shadow-lg">
                  <div className="p-4 rounded-full bg-primary/10 w-fit">
                    <Shield className="h-8 w-8 text-primary" />
                  </div>
                  <h3 className="text-xl font-light mt-4 mb-2">Enterprise Security</h3>
                  <p className="text-muted-foreground font-light">Bank-level encryption and compliance standards.</p>
                </div>
              </div>
            </div>
          </section>

          <section className="w-full py-12 md:py-24 lg:py-32">
            <div className="container px-4 md:px-6">
              <div className="flex flex-col items-center justify-center space-y-4 text-center">
                <div className="space-y-2">
                  <h2 className="text-3xl font-light tracking-tight md:text-4xl">
                    Start Signing in Minutes
                  </h2>
                  <p className="mx-auto max-w-[600px] text-muted-foreground md:text-xl font-light">
                    Experience the fastest way to sign and manage your documents. No credit card required.
                  </p>
                </div>
                <div className="w-full max-w-sm space-y-2">
                  <form className="flex space-x-2">
                    <Input
                      className="max-w-lg flex-1"
                      placeholder="Enter your email"
                      type="email"
                    />
                    <Button type="submit">Get Started</Button>
                  </form>
                  <p className="text-xs text-muted-foreground font-light">
                    Free plan includes up to 5 documents per month.{" "}
                    <Link className="underline underline-offset-2 hover:text-primary transition-colors" href="#">
                      Terms & Conditions
                    </Link>
                  </p>
                </div>
              </div>
            </div>
          </section>
        </main>
        <footer className="w-full py-6 border-t">
          <div className="container px-4 md:px-6">
            <div className="flex flex-col items-center justify-between gap-4 md:flex-row">
              <div className="flex items-center gap-2">
                <Image
                  src="https://hebbkx1anhila5yf.public.blob.vercel-storage.com/image-eebfn5UnSJoFRHHVsE1r7H3rNdcogd.png"
                  alt="ASign Logo"
                  width={24}
                  height={24}
                  className={`object-contain transition-all duration-300 ${isDarkMode ? '' : 'invert'}`}
                  priority
                />
                <p className="text-sm text-muted-foreground font-light">© 2024 ASign. All rights reserved.</p>
              </div>
              <nav className="flex gap-4">
                <Link className="text-sm text-muted-foreground hover:text-primary transition-colors font-light" href="#">Privacy</Link>
                <Link className="text-sm text-muted-foreground hover:text-primary transition-colors font-light" href="#">Terms</Link>
                <Link className="text-sm text-muted-foreground hover:text-primary transition-colors font-light" href="#">Contact</Link>
              </nav>
            </div>
          </div>
        </footer>
      </div>
    </div>
  )
}

================
File: src/lib/supabase/client.ts
================
import { createBrowserClient } from '@supabase/ssr'
import type { Database } from '@/types/database.types'

const getSupabaseUrl = () => {
  const url = process.env.NEXT_PUBLIC_SUPABASE_URL
  if (!url) throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL')
  return url
}

const getAnonKey = () => {
  const key = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  if (!key) throw new Error('Missing NEXT_PUBLIC_SUPABASE_ANON_KEY')
  return key
}

export const createClient = () => {
  return createBrowserClient<Database>(
    getSupabaseUrl(),
    getAnonKey()
  )
}

================
File: src/lib/supabase/server.ts
================
import { createServerClient, type CookieOptions } from '@supabase/ssr'
import { cookies } from 'next/headers'
import type { Database } from '@/types/database.types'

const getSupabaseUrl = () => {
  const url = process.env.NEXT_PUBLIC_SUPABASE_URL
  if (!url) throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL')
  return url
}

const getAnonKey = () => {
  const key = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  if (!key) throw new Error('Missing NEXT_PUBLIC_SUPABASE_ANON_KEY')
  return key
}

export const createClient = async () => {
  const cookieStore = await cookies()

  return createServerClient<Database>(
    getSupabaseUrl(),
    getAnonKey(),
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value
        },
        set(name: string, value: string, options: CookieOptions) {
          try {
            cookieStore.set({ name, value, ...options })
          } catch (error) {
            console.error('Error setting cookie:', error)
          }
        },
        remove(name: string, options: CookieOptions) {
          try {
            cookieStore.delete(name)
          } catch (error) {
            console.error('Error removing cookie:', error)
          }
        },
      },
    }
  )
}

================
File: src/lib/supabase/types.ts
================
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      profiles: {
        Row: {
          id: string
          full_name: string | null
          updated_at: string | null
          created_at: string
        }
        Insert: {
          id: string
          full_name?: string | null
          updated_at?: string | null
        }
        Update: {
          full_name?: string | null
          updated_at?: string | null
        }
      }
      documents: {
        Row: {
          id: string
          title: string
          file_path: string
          status: string
          owner_id: string
          created_at: string
          updated_at: string
        }
        Insert: {
          title: string
          file_path: string
          status?: string
          owner_id: string
        }
        Update: {
          title?: string
          file_path?: string
          status?: string
        }
      }
      // ... other tables remain the same
    }
  }
}

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/types/database.types.ts
================
export type Json =
  | string
  | number
  | boolean
  | null
  | { [key: string]: Json | undefined }
  | Json[]

export interface Database {
  public: {
    Tables: {
      profiles: {
        Row: {
          id: string
          full_name: string | null
          updated_at: string | null
          created_at: string
        }
        Insert: {
          id: string
          full_name?: string | null
          updated_at?: string | null
          created_at?: string
        }
        Update: {
          id?: string
          full_name?: string | null
          updated_at?: string | null
          created_at?: string
        }
      }
      documents: {
        Row: {
          id: string
          title: string
          file_path: string
          status: string
          owner_id: string
          created_at: string
          updated_at: string
        }
        Insert: {
          id?: string
          title: string
          file_path: string
          status?: string
          owner_id: string
          created_at?: string
          updated_at?: string
        }
        Update: {
          id?: string
          title?: string
          file_path?: string
          status?: string
          owner_id?: string
          created_at?: string
          updated_at?: string
        }
      }
      signatures: {
        Row: {
          id: string
          document_id: string
          signer_id: string
          signature_data: string
          position_x: number
          position_y: number
          page_number: number
          width: number
          height: number
          created_at: string
        }
        Insert: {
          id?: string
          document_id: string
          signer_id: string
          signature_data: string
          position_x: number
          position_y: number
          page_number: number
          width: number
          height: number
          created_at?: string
        }
        Update: {
          id?: string
          document_id?: string
          signer_id?: string
          signature_data?: string
          position_x?: number
          position_y?: number
          page_number?: number
          width?: number
          height?: number
          created_at?: string
        }
      }
      document_shares: {
        Row: {
          id: string
          document_id: string
          shared_with: string
          permissions: string
          created_at: string
        }
        Insert: {
          id?: string
          document_id: string
          shared_with: string
          permissions?: string
          created_at?: string
        }
        Update: {
          id?: string
          document_id?: string
          shared_with?: string
          permissions?: string
          created_at?: string
        }
      }
    }
  }
}

================
File: src/utils/error-handling.ts
================
export class AppError extends Error {
    constructor(
      message: string,
      public statusCode: number = 400,
      public code?: string
    ) {
      super(message)
      this.name = 'AppError'
    }
  }
  
  export const handleError = (error: unknown) => {
    if (error instanceof AppError) {
      return {
        message: error.message,
        statusCode: error.statusCode,
        code: error.code
      }
    }
  
    console.error('Unexpected error:', error)
    return {
      message: 'An unexpected error occurred',
      statusCode: 500
    }
  }

================
File: src/utils/pdf-coordinates.ts
================
interface PageDimensions {
    width: number
    height: number
  }
  
  export function viewportToPageCoordinates(
    viewportX: number,
    viewportY: number,
    pageNumber: number,
    pageDimensions: PageDimensions,
    scale: number
  ) {
    const pageX = (viewportX / (pageDimensions.width * scale)) * 100
    const pageY = (viewportY / (pageDimensions.height * scale)) * 100
  
    return { pageX, pageY, pageNumber }
  }
  
  export function pageToViewportCoordinates(
    pageX: number,
    pageY: number,
    pageNumber: number,
    pageDimensions: PageDimensions,
    scale: number
  ) {
    const viewportX = (pageX * pageDimensions.width * scale) / 100
    const viewportY = (pageY * pageDimensions.height * scale) / 100
  
    return { viewportX, viewportY }
  }

================
File: src/utils/supabase.ts
================
import { createClient } from '@supabase/supabase-js'
import { Database } from '@/types/database.types'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables')
}

export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey)

================
File: src/middleware.ts
================
import { createServerClient, type CookieOptions } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'
import type { Database } from '@/types/database.types'

const getSupabaseUrl = () => {
  const url = process.env.NEXT_PUBLIC_SUPABASE_URL
  if (!url) throw new Error('Missing NEXT_PUBLIC_SUPABASE_URL')
  return url
}

const getAnonKey = () => {
  const key = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  if (!key) throw new Error('Missing NEXT_PUBLIC_SUPABASE_ANON_KEY')
  return key
}

export async function middleware(request: NextRequest) {
  let response = NextResponse.next({
    request: {
      headers: request.headers,
    },
  })

  const supabase = createServerClient<Database>(
    getSupabaseUrl(),
    getAnonKey(),
    {
      cookies: {
        get(name: string) {
          return request.cookies.get(name)?.value
        },
        set(name: string, value: string, options: CookieOptions) {
          response.cookies.set({
            name,
            value,
            ...options,
          })
        },
        remove(name: string, options: CookieOptions) {
          response.cookies.delete({
            name,
            ...options,
          })
        },
      },
    }
  )

  return response
}

export const config = {
  matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)'],
}

================
File: .eslintrc.json
================
{
  "extends": [
    "next/core-web-vitals",
    "next/typescript",
    "prettier"
  ],
  "rules": {
    "no-unused-vars": "warn",
    "no-console": "warn",
    "@typescript-eslint/no-explicit-any": "warn"
  }
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "stone",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: next.config.ts
================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  images: {
    domains: ['hebbkx1anhila5yf.public.blob.vercel-storage.com'],
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'hebbkx1anhila5yf.public.blob.vercel-storage.com',
        pathname: '/**',
      },
    ],
  },
  webpack: (config) => {
    config.resolve.alias = {
      ...config.resolve.alias,
      canvas: false,
    };
    return config;
  },
};

export default nextConfig;

================
File: package.json
================
{
  "name": "my-nextjs-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@radix-ui/react-slot": "^1.1.0",
    "@react-pdf-viewer/core": "^3.11.0",
    "@react-pdf-viewer/default-layout": "^3.11.0",
    "@react-pdf-viewer/page-navigation": "^3.11.0",
    "@react-pdf-viewer/scroll-mode": "^3.11.0",
    "@react-pdf-viewer/zoom": "^3.11.0",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/ssr": "^0.5.2",
    "@types/react-dropzone": "^4.2.2",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "framer-motion": "^11.11.17",
    "lucide-react": "^0.460.0",
    "next": "15.0.3",
    "pdfjs-dist": "3.11.174",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-dropzone": "^14.3.5",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@shadcn/ui": "^0.0.4",
    "@supabase/supabase-js": "^2.47.1",
    "@types/node": "^20.17.9",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "@typescript-eslint/eslint-plugin": "^8.15.0",
    "autoprefixer": "^10.4.18",
    "eslint": "^8",
    "eslint-config-next": "15.0.3",
    "eslint-config-prettier": "^9.1.0",
    "postcss": "^8",
    "prettier": "^3.3.3",
    "prettier-plugin-tailwindcss": "^0.6.9",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
    darkMode: 'class',
    content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	container: {
  		center: true,
  		padding: "2rem",
  		screens: {
  			"2xl": "1400px",
  		},
  	},
  	extend: {
  		colors: {
  			border: "hsl(var(--border))",
  			input: "hsl(var(--input))",
  			ring: "hsl(var(--ring))",
  			background: "hsl(var(--background))",
  			foreground: "hsl(var(--foreground))",
  			primary: {
  				DEFAULT: "hsl(var(--primary))",
  				foreground: "hsl(var(--primary-foreground))",
  			},
  			muted: {
  				DEFAULT: "hsl(var(--muted))",
  				foreground: "hsl(var(--muted-foreground))",
  			},
  		},
  	},
  },
  plugins: [],
}

export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
